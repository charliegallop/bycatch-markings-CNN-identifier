# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'appv2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5 import QtWidgets
from PyQt5 import QtCore
from PyQt5 import QtGui

from config import MODEL_LIST, BACTH_SIZE, TRAIN_FOR_LIST, EPOCHS



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)

        # Config imports
        self.modelList = MODEL_LIST
        self.train_for_list = TRAIN_FOR_LIST

        self.model = ""
        self.image_dir = ""
        self.label_dir = ""
        self.epochs = EPOCHS
        self.batch_size = BACTH_SIZE
        self.train_for = ""
        self.images_dir_pred = ""
        self.crop_model_path = ""
        self.pred_model_path = ""
        self.output_dir = ""
        self.detection_threshold = 0.5
        self.markingsPredModel = ""
        self.dolphinPredModel = ""

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.tab)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 10, 741, 113))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.backboneLabel = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.backboneLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.backboneLabel.setObjectName("backboneLabel")
        self.verticalLayout.addWidget(self.backboneLabel)


        # Backbone Combo Box
        self.backboneSelect = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.backboneSelect.setCurrentText("mobilenet")
        self.backboneSelect.setObjectName("backboneSelect")
        self.backboneSelect.addItems(self.modelList)

        # making it editable
        self.backboneSelect.setEditable(True)
  
        # getting the line edit of combo box
        line_edit = self.backboneSelect.lineEdit()
  
        # setting line edit alignment to the center
        line_edit.setAlignment(QtCore.Qt.AlignCenter)
  
        # setting line edit to read only
        line_edit.setReadOnly(True)        
        self.verticalLayout.addWidget(self.backboneSelect)

        # Model select dialog
        self.modelSelect = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.modelSelect.setObjectName("modelSelect")
        self.modelSelect.clicked.connect(lambda: self.on_click("modelSelect"))


        self.verticalLayout.addWidget(self.modelSelect)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.tab)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(20, 160, 741, 91))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_4 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_3.addWidget(self.label_4)


        # Image Directory Selector
        self.imageSelect = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.imageSelect.setObjectName("imageSelect")
        self.verticalLayout_3.addWidget(self.imageSelect)
        self.imageSelect.clicked.connect(lambda: self.on_click("imageSelect"))


        # Label directory selector
        self.labelSelect = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.labelSelect.setObjectName("labelSelect")
        self.verticalLayout_3.addWidget(self.labelSelect)
        self.labelSelect.clicked.connect(lambda: self.on_click("labelSelect"))

        # Train button
        self.trainButton = QtWidgets.QPushButton(self.tab)
        self.trainButton.setGeometry(QtCore.QRect(360, 470, 80, 26))
        self.trainButton.setObjectName("trainButton")
        self.trainButton.clicked.connect(lambda: self.on_click("trainModel"))

        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.tab)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(20, 290, 381, 71))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.epochLabel = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.epochLabel.setFont(font)
        self.epochLabel.setObjectName("epochLabel")
        self.verticalLayout_4.addWidget(self.epochLabel)
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.epochSpinBox = QtWidgets.QSpinBox(self.verticalLayoutWidget_3)
        self.epochSpinBox.setMinimum(1)
        self.epochSpinBox.setMaximum(10000)
        self.epochSpinBox.setProperty("value", self.epochs)
        self.epochSpinBox.setObjectName("epochSpinBox")
        self.gridLayout_3.addWidget(self.epochSpinBox, 0, 1, 1, 1)
        self.epochSlider = QtWidgets.QSlider(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.epochSlider.sizePolicy().hasHeightForWidth())
        self.epochSlider.setSizePolicy(sizePolicy)
        self.epochSlider.setMinimum(1)
        self.epochSlider.setMaximum(1000)
        self.epochSlider.setSingleStep(10)
        self.epochSlider.setSliderPosition(self.epochs)
        self.epochSlider.setOrientation(QtCore.Qt.Horizontal)
        self.epochSlider.setObjectName("epochSlider")
        self.gridLayout_3.addWidget(self.epochSlider, 0, 0, 1, 1)
        self.gridLayout_3.setColumnStretch(0, 1)
        self.verticalLayout_4.addLayout(self.gridLayout_3)
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.tab)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(20, 370, 381, 71))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.batchLabel = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.batchLabel.setFont(font)
        self.batchLabel.setObjectName("batchLabel")
        self.verticalLayout_5.addWidget(self.batchLabel)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.batchSpinBox = QtWidgets.QSpinBox(self.verticalLayoutWidget_4)
        self.batchSpinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.batchSpinBox.setMinimum(1)
        self.batchSpinBox.setMaximum(1000)
        self.batchSpinBox.setProperty("value", 16)
        self.batchSpinBox.setObjectName("batchSpinBox")
        self.gridLayout_2.addWidget(self.batchSpinBox, 0, 0, 1, 1)
        self.verticalLayout_5.addLayout(self.gridLayout_2)
        self.verticalLayoutWidget_5 = QtWidgets.QWidget(self.tab)
        self.verticalLayoutWidget_5.setGeometry(QtCore.QRect(410, 290, 351, 151))
        self.verticalLayoutWidget_5.setObjectName("verticalLayoutWidget_5")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_5)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")

        # Resize section
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")

        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget_5)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_7.addWidget(self.label_2)
        spacerItem = QtWidgets.QSpacerItem(16, 12, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_7.addItem(spacerItem)
        self.spinBox = QtWidgets.QSpinBox(self.verticalLayoutWidget_5)
        self.spinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.spinBox.setMinimum(240)
        self.spinBox.setMaximum(3000)
        self.spinBox.setSingleStep(20)
        self.spinBox.setProperty("value", 720)
        self.spinBox.setObjectName("spinBox")
        self.verticalLayout_7.addWidget(self.spinBox)
        self.verticalLayout_6.addLayout(self.verticalLayout_7)
        self.label_5 = QtWidgets.QLabel(self.verticalLayoutWidget_5)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_6.addWidget(self.label_5)
        self.trainForSelect = QtWidgets.QComboBox(self.verticalLayoutWidget_5)
        self.trainForSelect.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContentsOnFirstShow)
        self.trainForSelect.setMinimumContentsLength(0)
        self.trainForSelect.setPlaceholderText("")
        self.trainForSelect.setObjectName("trainForSelect")
        self.trainForSelect.addItem("")
        self.trainForSelect.addItem("")
        self.trainForSelect.addItem("")
        self.verticalLayout_6.addWidget(self.trainForSelect)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.verticalLayoutWidget_6 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_6.setGeometry(QtCore.QRect(20, 10, 741, 113))
        self.verticalLayoutWidget_6.setObjectName("verticalLayoutWidget_6")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_6)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.label_3 = QtWidgets.QLabel(self.verticalLayoutWidget_6)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_8.addWidget(self.label_3)
        self.backboneLabel_2 = QtWidgets.QLabel(self.verticalLayoutWidget_6)
        self.backboneLabel_2.setAlignment(QtCore.Qt.AlignCenter)
        self.backboneLabel_2.setObjectName("backboneLabel_2")
        self.verticalLayout_8.addWidget(self.backboneLabel_2)

        # Backbone select for dolphin
        self.backboneDolphinSelect = QtWidgets.QComboBox(self.verticalLayoutWidget_6)
        self.backboneDolphinSelect.setCurrentText("")
        self.backboneDolphinSelect.setObjectName("backboneDolphinSelect")
        # making it editable
        self.backboneDolphinSelect.setEditable(True)
  
        # getting the line edit of combo box
        line_edit = self.backboneDolphinSelect.lineEdit()
  
        # setting line edit alignment to the center
        line_edit.setAlignment(QtCore.Qt.AlignCenter)
  
        # setting line edit to read only
        line_edit.setReadOnly(True)    

        self.verticalLayout_8.addWidget(self.backboneDolphinSelect)
        self.backboneDolphinSelect.addItems(self.modelList)

        # Dolphin model selection for prediction
        self.dolphinPredSelect = QtWidgets.QPushButton(self.verticalLayoutWidget_6)
        self.dolphinPredSelect.setObjectName("dolphinPredSelect")
        self.verticalLayout_8.addWidget(self.dolphinPredSelect)
        self.dolphinPredSelect.clicked.connect(lambda: self.on_click("dolphinPredSelect"))


        self.verticalLayoutWidget_7 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_7.setGeometry(QtCore.QRect(20, 140, 741, 113))
        self.verticalLayoutWidget_7.setObjectName("verticalLayoutWidget_7")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_7)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.label_6 = QtWidgets.QLabel(self.verticalLayoutWidget_7)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_9.addWidget(self.label_6)
        self.backboneLabel_3 = QtWidgets.QLabel(self.verticalLayoutWidget_7)
        self.backboneLabel_3.setAlignment(QtCore.Qt.AlignCenter)
        self.backboneLabel_3.setObjectName("backboneLabel_3")
        self.verticalLayout_9.addWidget(self.backboneLabel_3)

        # Backbone selection for markings
        self.backboneMarkingsSelect = QtWidgets.QComboBox(self.verticalLayoutWidget_7)
        self.backboneMarkingsSelect.setCurrentText("")
        self.backboneMarkingsSelect.setObjectName("backboneMarkingsSelect")

        # making it editable
        self.backboneMarkingsSelect.setEditable(True)
  
        # getting the line edit of combo box
        line_edit = self.backboneMarkingsSelect.lineEdit()
  
        # setting line edit alignment to the center
        line_edit.setAlignment(QtCore.Qt.AlignCenter)
  
        # setting line edit to read only
        line_edit.setReadOnly(True)

        self.verticalLayout_9.addWidget(self.backboneMarkingsSelect)
        self.backboneMarkingsSelect.addItems(self.modelList)


        # Markings model selection for prediction
        self.markingsPredSelect = QtWidgets.QPushButton(self.verticalLayoutWidget_7)
        self.markingsPredSelect.setObjectName("markingsPredSelect")
        self.verticalLayout_9.addWidget(self.markingsPredSelect)
        self.markingsPredSelect.clicked.connect(lambda: self.on_click("markingsPredSelect"))


        self.verticalLayoutWidget_8 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_8.setGeometry(QtCore.QRect(20, 270, 741, 71))
        self.verticalLayoutWidget_8.setObjectName("verticalLayoutWidget_8")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_8)
        self.verticalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.label_7 = QtWidgets.QLabel(self.verticalLayoutWidget_8)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.verticalLayout_10.addWidget(self.label_7)

        # Images dir selection
        self.imagesPredSelect = QPushButton(self.verticalLayoutWidget_8)
        self.imagesPredSelect.setObjectName(u"imagesPredSelect")
        self.verticalLayout_10.addWidget(self.imagesPredSelect)
        self.imagesPredSelect.clicked.connect(lambda: self.on_click("imagesPredSelect"))


        # Output directory selector
        self.outputSelect = QtWidgets.QPushButton(self.verticalLayoutWidget_8)
        self.outputSelect.setObjectName("outputSelect")
        self.verticalLayout_10.addWidget(self.outputSelect)
        self.outputSelect.clicked.connect(lambda: self.on_click("outputSelect"))


        self.horizontalLayoutWidget = QtWidgets.QWidget(self.tab_2)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(20, 449, 741, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        # Dolphin prediction button
        self.dolphinPredButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.dolphinPredButton.setObjectName("dolphinPredButton")
        self.horizontalLayout.addWidget(self.dolphinPredButton)
        self.dolphinPredButton.clicked.connect(lambda: self.on_click("dolphinPredButton"))


        # Markings prediction button
        self.markingsPredButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.markingsPredButton.setObjectName("markingsPredButton")
        self.horizontalLayout.addWidget(self.markingsPredButton)

        # Markings prediction on cropped images
        self.cropPredButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.cropPredButton.setObjectName("cropPredButton")
        self.horizontalLayout.addWidget(self.cropPredButton)

        # All predictions button
        self.allPredButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.allPredButton.setObjectName("allPredButton")
        self.horizontalLayout.addWidget(self.allPredButton)

        self.verticalLayoutWidget_9 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_9.setGeometry(QtCore.QRect(20, 350, 741, 91))
        self.verticalLayoutWidget_9.setObjectName("verticalLayoutWidget_9")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_9)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.label_8 = QtWidgets.QLabel(self.verticalLayoutWidget_9)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_11.addWidget(self.label_8)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.thresholdLCD = QtWidgets.QLCDNumber(self.verticalLayoutWidget_9)
        self.thresholdLCD.setProperty("value", 50.0)
        self.thresholdLCD.setProperty("intValue", 50)
        self.thresholdLCD.setObjectName("thresholdLCD")
        self.horizontalLayout_2.addWidget(self.thresholdLCD)
        self.thresholdDial = QtWidgets.QDial(self.verticalLayoutWidget_9)
        self.thresholdDial.setMaximumSize(QtCore.QSize(120, 16777215))
        self.thresholdDial.setMinimum(1)
        self.thresholdDial.setMaximum(100)
        self.thresholdDial.setSingleStep(0)
        self.thresholdDial.setPageStep(10)
        self.thresholdDial.setProperty("value", 50)
        self.thresholdDial.setOrientation(QtCore.Qt.Horizontal)
        self.thresholdDial.setInvertedAppearance(False)
        self.thresholdDial.setInvertedControls(False)
        self.thresholdDial.setWrapping(False)
        self.thresholdDial.setNotchesVisible(True)
        self.thresholdDial.setObjectName("thresholdDial")
        self.horizontalLayout_2.addWidget(self.thresholdDial)
        self.verticalLayout_11.addLayout(self.horizontalLayout_2)
        self.tabWidget.addTab(self.tab_2, "")
        self.verticalLayout_2.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionedit = QtWidgets.QAction(MainWindow)
        self.actionedit.setObjectName("actionedit")
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionCopy = QtWidgets.QAction(MainWindow)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtWidgets.QAction(MainWindow)
        self.actionPaste.setShortcut("")
        self.actionPaste.setObjectName("actionPaste")

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.epochSlider.valueChanged['int'].connect(self.epochSpinBox.setValue)
        self.epochSpinBox.valueChanged['int'].connect(self.epochSlider.setValue)
        self.thresholdDial.valueChanged['int'].connect(self.thresholdLCD.display)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Bycatch Detection App"))
        self.label.setText(_translate("MainWindow", "Step 1: Select the backbone for the Faster R-CNN model:"))
        self.backboneLabel.setText(_translate("MainWindow", "Select a backbone and a model.pth file if using pre-trained model"))
        self.modelSelect.setText(_translate("MainWindow", "Select model.pth file"))
        self.label_4.setText(_translate("MainWindow", "Step 2: Select the directory for the training images and labels:"))
        self.imageSelect.setText(_translate("MainWindow", "Select image directory"))
        self.labelSelect.setText(_translate("MainWindow", "Select labels directory"))
        self.epochLabel.setText(_translate("MainWindow", "Select the number of epochs to train for:"))
        self.batchLabel.setText(_translate("MainWindow", "Select batch size:"))
        self.label_2.setText(_translate("MainWindow", "Resize images to:"))
        self.label_5.setText(_translate("MainWindow", "Select what classes to train for:"))
        self.trainForSelect.setItemText(0, _translate("MainWindow", "dolphin"))
        self.trainForSelect.setItemText(1, _translate("MainWindow", "markings"))
        self.trainForSelect.setItemText(2, _translate("MainWindow", "all"))
        self.trainButton.setText(_translate("MainWindow", "Train Model!"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Training"))
        self.label_3.setText(_translate("MainWindow", "Step 1: Select the backbone for the dolphin prediction model:"))
        self.backboneLabel_2.setText(_translate("MainWindow", "Select a backbone and the dolphin detection model.pth file "))
        self.dolphinPredSelect.setText(_translate("MainWindow", "Select model.pth file"))
        self.label_6.setText(_translate("MainWindow", "Step 2: Select the backbone for the bycatch markings prediction model:"))
        self.backboneLabel_3.setText(_translate("MainWindow", "Select a backbone and the bycatch markings detection model.pth file "))
        self.markingsPredSelect.setText(_translate("MainWindow", "Select model.pth file"))
        self.label_7.setText(_translate("MainWindow", "Step 3: Select the directory to save the prediction images to:"))
        self.outputSelect.setText(_translate("MainWindow", "Select output directory"))
        self.dolphinPredButton.setText(_translate("MainWindow", "Predict for\n"
" dolphin"))
        self.markingsPredButton.setText(_translate("MainWindow", "Predict for\n"
" bycatch markings"))
        self.cropPredButton.setText(_translate("MainWindow", "Predict for bycatch markings\n"
" on cropped images"))
        self.allPredButton.setText(_translate("MainWindow", "Predict for \n"
" all classes"))
        self.label_8.setText(_translate("MainWindow", "Select detection threshold percentage:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Prediction"))
        self.actionedit.setText(_translate("MainWindow", "edit"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionNew.setStatusTip(_translate("MainWindow", "Create new file"))
        self.actionNew.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionSave.setStatusTip(_translate("MainWindow", "Save a file"))
        self.actionSave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionCopy.setText(_translate("MainWindow", "Copy"))
        self.actionCopy.setStatusTip(_translate("MainWindow", "Copy file"))
        self.actionCopy.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionPaste.setText(_translate("MainWindow", "Paste"))
        self.actionPaste.setStatusTip(_translate("MainWindow", "Paste file"))
        self.trainButton.setText(_translate("MainWindow", "Train Model!"))
        self.imagesPredSelect.setText(QCoreApplication.translate("MainWindow", u"Select prediction images directory", None))

    def openFileNameDialog(self, default_dir):
            options = QFileDialog.Options()
            options |= QFileDialog.DontUseNativeDialog
            fileName, _ = QFileDialog.getOpenFileName(QWidget(),"QFileDialog.getOpenFileName()", default_dir,"PyTorch files (*.pth);;All Files (*)", options=options)
            return fileName

    def openDirectoryNameDialog(self, caption, default_dir):
            options = QFileDialog.Options()
            options |= QFileDialog.DontUseNativeDialog
            directory = QFileDialog.getExistingDirectory(QWidget(), caption, default_dir, QFileDialog.ShowDirsOnly)

            return directory

    
    def train_model(self):
         # finding the content of current item in combo box
        self.backbone = self.backboneSelect.currentText()
        self.model = self.model
        self.image_dir = self.image_dir
        self.label_dir = self.label_dir
        self.epochs = self.epochSpinBox.value()
        self.batch_size = self.batchSpinBox.value()
        self.train_for = self.trainForSelect.currentText()

        from training_engine import engine
        train_engine = engine(
            backbone = self.backbone,
            model_path = self.model,
            images_dir = self.image_dir,
            labels_dir = self.label_dir,
            epochs = self.epochs,
            batch_size = self.batch_size,
            train_for = self.train_for,
            resize=512
        )
        train_engine.run()

    def predict_model(self, predict_for = None):

        self.predict_for = predict_for

        if predict_for == "crop":
            crop = True

        # finding the content of current item in combo box
        self.dolphinModel = self.dolphinPredModel
        self.markingsModel = self.markingsPredModel
        self.train_for = self.trainForSelect.currentText()
        self.images_dir = self.images_dir_pred
        self.dolphinPredModel = self.dolphinPredModel
        self.markingsPredModel = self.markingsPredModel
        self.output_dir = self.output_dir
        self.detection_threshold = self.thresholdDial.value()

        from prediction_engine import predict_engine
        predict_engine = predict_engine(
            dolphin_backbone = self.dolphinBackbone,
            markings_backbone = self.markingsBackbone,
            images_dir = self.image_dir,
            dolphin_pred_model = self.dolphinPredModel,
            markings_pred_model = self.markingsPredModel,
            output_dir = self.output_dir,
            detection_threshold = self.detection_threshold,
            crop = False,
            predict_for = self.predict_for

        )
        predict_engine.predict()


    def on_click(self, who):
        if who == "modelSelect":
            self.model = self.openFileNameDialog("/home/charlie/Documents/Uni/Exeter - Data Science/Dissertation/models")
        elif who == "imageSelect":
            self.image_dir = self.openDirectoryNameDialog(caption = "Select images directory", default_dir = "/home/charlie/Documents/Uni/Exeter - Data Science/Dissertation/data")
        elif who == "labelSelect":
            self.label_dir = self.openDirectoryNameDialog(caption = "Select labels directory", default_dir = "/home/charlie/Documents/Uni/Exeter - Data Science/Dissertation/data")
        elif who == "trainModel":
            self.train_model()

        elif who == "outputSelect":
            self.output_dir = self.openDirectoryNameDialog(caption = "Select output directory", default_dir = "/home/charlie/Documents/Uni/Exeter - Data Science/Dissertation/models")
        elif who == "dolphinPredSelect":
            self.dolphinPredModel = self.openFileNameDialog("/home/charlie/Documents/Uni/Exeter - Data Science/Dissertation/models")
        elif who == "markingsPredSelect":
            self.markingsPredModel = self.openFileNameDialog("/home/charlie/Documents/Uni/Exeter - Data Science/Dissertation/models")
        elif who == "dolphinPredButton":
            self.predict_model("dolphin")
        elif who == "markingsPredButton":
            self.predict_model("markings")
        elif who == "cropPredButton":
            self.predict_model("crop")
        elif who == "allPredButton":
            self.predict_model("all")
        elif who == "imagesPredSelect":
            self.image_dir_pred = self.openDirectoryNameDialog(caption = "Select prediction images directory", default_dir = "/home/charlie/Documents/Uni/Exeter - Data Science/Dissertation/data")
    


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
